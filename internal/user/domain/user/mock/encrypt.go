// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordEncrypter is a mock of PasswordEncrypter interface.
type MockPasswordEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncrypterMockRecorder
}

// MockPasswordEncrypterMockRecorder is the mock recorder for MockPasswordEncrypter.
type MockPasswordEncrypterMockRecorder struct {
	mock *MockPasswordEncrypter
}

// NewMockPasswordEncrypter creates a new mock instance.
func NewMockPasswordEncrypter(ctrl *gomock.Controller) *MockPasswordEncrypter {
	mock := &MockPasswordEncrypter{ctrl: ctrl}
	mock.recorder = &MockPasswordEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncrypter) EXPECT() *MockPasswordEncrypterMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockPasswordEncrypter) Encrypt(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPasswordEncrypterMockRecorder) Encrypt(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPasswordEncrypter)(nil).Encrypt), password)
}
