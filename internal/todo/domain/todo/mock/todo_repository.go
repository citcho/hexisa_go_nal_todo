// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	todo "github.com/hexisa_go_nal_todo/internal/todo/domain/todo"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockITodoRepository) FindAll(arg0 context.Context, arg1 string) ([]*todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]*todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockITodoRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockITodoRepository)(nil).FindAll), arg0, arg1)
}

// FindById mocks base method.
func (m *MockITodoRepository) FindById(arg0 context.Context, arg1 string) (*todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockITodoRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockITodoRepository)(nil).FindById), arg0, arg1)
}

// Save mocks base method.
func (m *MockITodoRepository) Save(arg0 context.Context, arg1 *todo.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITodoRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITodoRepository)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockITodoRepository) Update(arg0 context.Context, arg1 *todo.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITodoRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoRepository)(nil).Update), arg0, arg1)
}
