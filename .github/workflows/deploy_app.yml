name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  AWS_APP_ROLE_ARN: '${{ secrets.AWS_APP_ROLE_ARN }}'
  ECR_REPOSITORY: '${{ secrets.ECR_REPOSITORY }}'
  ECS_SERVICE: '${{ secrets.ECS_SERVICE }}'
  ECS_CLUSTER: '${{ secrets.ECS_CLUSTER }}'
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Private Key File
        run: |
            echo "${{ secrets.PRIVATE_KEY }}" > ./internal/pkg/auth/cert/secret.pem
      - name: Create Public Key File
        run: |
            echo "${{ secrets.PUBLIC_KEY }}" > ./internal/pkg/auth/cert/public.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
            role-to-assume: ${{ env.AWS_APP_ROLE_ARN }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f "go.Dockerfile" --target deploy .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true
